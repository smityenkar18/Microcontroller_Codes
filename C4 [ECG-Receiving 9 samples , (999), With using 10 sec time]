// 9 samples , 999
#include <bluefruit.h>

#define ECG_PIN 1                // ADC pin for the ECG sensor (AD8232)
#define BUFFER_SIZE 200          // 200 samples per batch (1 second at 200Hz)
#define SAMPLE_INTERVAL_MS 5     // Sample every 5 ms for 200Hz
#define MTU_SIZE 244             // Maximum MTU Size (adjusted to 247 for optimal size)
#define SAMPLING_DURATION_MS 10000 // 10 seconds sampling duration

bool deviceConnected = false;
uint16_t ecgBuffer[BUFFER_SIZE]; // Buffer to hold one batch of ECG samples.
uint32_t batchCount = 0;         // Batch counter.
int bufferIndex = 0;             // Current index in the buffer.
unsigned long lastSampleTime = 0; // Last time a sample was taken.
unsigned long startTime = 0;      // Time when sampling started.
bool samplingComplete = false;    // Flag indicating if sampling is complete

BLEUart bleUart;

// ----- ECG Sampling Function -----
// Reads an ADC value and stores it in the buffer.
void sampleECG() {
  ecgBuffer[bufferIndex] = analogRead(ECG_PIN);  // Direct ADC reading
  bufferIndex++;

  // When 200 samples are collected for the current second, store and send them
  if (bufferIndex >= BUFFER_SIZE) {
    String dataString = "";

    // Convert the 200 samples to hexadecimal and append them
    for (int i = 0; i < BUFFER_SIZE; i++) {
      dataString += String(ecgBuffer[i], HEX); // Convert each sample to hexadecimal
      if (i < BUFFER_SIZE - 1) {
        dataString += ","; // Add comma separator between values
      }
    }

    // Debugging: print the length of the data string to monitor if it's too large for MTU
    Serial.print("Data to send size: ");
    Serial.println(dataString.length()); // This will show the length of the data in characters

    // Send the hex data for the current second over BLE
    bleUart.print(dataString);
    bleUart.println(); // End of data transmission for this second

    batchCount++;
    Serial.print("Batch sent: ");
    Serial.println(batchCount);

    bufferIndex = 0;  // Reset buffer for the next second's data
  }
}

// ----- BLE Connection Parameter Optimization -----
void setPreferredConnectionParams() {
  uint16_t min_conn_interval = 6;  // 7.5ms (6 * 1.25ms)
  uint16_t max_conn_interval = 24; // 30ms (24 * 1.25ms)
  Bluefruit.Periph.setConnInterval(min_conn_interval, max_conn_interval);
  Serial.println("Connection parameters set."); // Debugging
}

// ----- BLE Event Handlers -----
void connect_callback(uint16_t conn_handle) {
  Serial.print("Device Connected with handle: ");
  Serial.println(conn_handle);
  deviceConnected = true;
  setPreferredConnectionParams();
  startTime = millis(); // Start timing when connected
  samplingComplete = false;
}

void disconnect_callback(uint16_t conn_handle, uint8_t reason) {
  Serial.print("Device Disconnected with handle: ");
  Serial.println(conn_handle);
  Serial.print("Reason: 0x");
  Serial.println(reason, HEX); // Print disconnect reason in hex
  deviceConnected = false;
  samplingComplete = true; // Consider disconnected as sampling complete
}

// ----- Setup Function -----
void setup() {
  Serial.begin(115200);
  delay(100); // Give serial time to initialize

  pinMode(ECG_PIN, INPUT);

  Serial.println("Initializing Bluefruit...");
  Bluefruit.begin();
  Bluefruit.setName("XIAO_ECG_Monitor");
  Serial.println("Bluefruit initialized.");

  // Set BLE connection callbacks
  Bluefruit.Periph.setConnectCallback(connect_callback);
  Bluefruit.Periph.setDisconnectCallback(disconnect_callback);
  Serial.println("Callbacks set.");

  bleUart.begin();
  Serial.println("UART service started.");
  Bluefruit.Advertising.addService(bleUart);
  Bluefruit.Advertising.addName();
  Bluefruit.Advertising.restartOnDisconnect(true);
  Serial.println("Advertising settings configured.");

  Bluefruit.Advertising.start();
  Serial.println("BLE UART Ready. Waiting for connection...");
}

// ----- Main Loop -----
void loop() {
  if (deviceConnected && !samplingComplete) {
    unsigned long currentMillis = millis();

    // Check if sampling duration has elapsed
    if (currentMillis - startTime >= SAMPLING_DURATION_MS) {
      samplingComplete = true;
      Serial.println("Sampling Complete!");

      // Ensure any remaining data in the buffer is sent.
      if (bufferIndex > 0) {
        String dataString = "";
        for (int i = 0; i < bufferIndex; i++) {
          dataString += String(ecgBuffer[i], HEX);
          if (i < bufferIndex - 1) {
            dataString += ",";
          }
        }

        // Send the remaining data in hex
        bleUart.print(dataString);
        bleUart.println();
        Serial.println("Remaining Data Sent");
      }
      return; // Exit the sampling loop after completion
    }

    // Sample ECG data if the interval has passed
    if (currentMillis - lastSampleTime >= SAMPLE_INTERVAL_MS) {
      lastSampleTime = currentMillis;
      sampleECG();
    }
  }
}

// ecg ble with multithreading
#include <bluefruit.h>
#include <Arduino.h>

// ----- Configuration Parameters -----
#define ECG_PIN 1                // ADC pin for the ECG sensor (AD8232)
#define BUFFER_SIZE 200          // 200 samples per batch (1 sec at 200Hz)
#define SAMPLE_INTERVAL_MS 5     // Sample every 5 ms for 200Hz
#define TOTAL_SAMPLES 2000       // Exactly 2000 samples per connection

// ----- Global Variables -----
volatile bool deviceConnected = false;
volatile int totalSamplesCollected = 0; // Updated by the processing task
uint32_t batchCount = 0;                // Batch counter

BLEUart bleUart;  // BLE UART service

// ----- Batch Structure -----
// Each batch holds up to BUFFER_SIZE samples and a count indicating how many samples.
typedef struct {
  uint16_t samples[BUFFER_SIZE];
  uint16_t count; // Number of valid samples in this batch (will be BUFFER_SIZE except possibly the last batch)
} Batch;

// ----- Queues -----
// sampleQueue: holds individual ECG samples (uint16_t)
// batchQueue: holds full (or partial) batches of ECG samples.
QueueHandle_t sampleQueue;
QueueHandle_t batchQueue;

// ----- Function: Send Data Buffer Over BLE -----
// (Logic identical to your original sendDataBuffer, except that it now accepts a pointer and count)
void sendDataBuffer(uint16_t *buffer, uint16_t count) {
  String dataString = "";

  for (int i = 0; i < count; i++) {
    char hexStr[5];
    sprintf(hexStr, "%04X", buffer[i]); // Convert to 4-character hex
    dataString += hexStr;
    if (i < count - 1) {
      dataString += ",";
    }
  }

  Serial.print("Data to send size: ");
  Serial.println(dataString.length());

  // Send BLE data
  bleUart.print(dataString);
  bleUart.println();

  batchCount++;
  Serial.print("Batch sent: ");
  Serial.println(batchCount);
}

// ----- Task 1: ECG Data Acquisition -----
// Reads the ECG sample every 5 ms and posts it to the sampleQueue.
void taskAcquisition(void *pvParameters) {
  while (1) {
    if (deviceConnected && totalSamplesCollected < TOTAL_SAMPLES) {
      uint16_t sample = analogRead(ECG_PIN);
      // Post the sample to the sampleQueue; if full, print a warning.
      if (xQueueSend(sampleQueue, &sample, 0) != pdTRUE) {
        Serial.println("Sample queue full! Data loss may occur.");
      }
      vTaskDelay(pdMS_TO_TICKS(SAMPLE_INTERVAL_MS));
    } else {
      // If not connected or sampling complete, yield a bit.
      vTaskDelay(pdMS_TO_TICKS(10));
    }
  }
}

// ----- Task 2: ECG Data Processing -----
// Retrieves individual samples, buffers them into batches, and posts complete (or partial) batches to batchQueue.
void taskProcessing(void *pvParameters) {
  uint16_t localBuffer[BUFFER_SIZE];
  uint16_t localIndex = 0;
  
  while (1) {
    uint16_t sample;
    // Wait indefinitely until a sample is available.
    if (xQueueReceive(sampleQueue, &sample, portMAX_DELAY) == pdTRUE) {
      localBuffer[localIndex++] = sample;
      totalSamplesCollected++;  // Update global sample count
      
      // When the local buffer is full, send the batch.
      if (localIndex >= BUFFER_SIZE) {
        Batch batch;
        memcpy(batch.samples, localBuffer, BUFFER_SIZE * sizeof(uint16_t));
        batch.count = BUFFER_SIZE;
        if (xQueueSend(batchQueue, &batch, 0) != pdTRUE) {
          Serial.println("Batch queue full! Data loss may occur.");
        }
        localIndex = 0;
      }
      
      // If TOTAL_SAMPLES reached and there are remaining samples, send them as a partial batch.
      if (totalSamplesCollected >= TOTAL_SAMPLES && localIndex > 0) {
        Batch batch;
        memcpy(batch.samples, localBuffer, localIndex * sizeof(uint16_t));
        batch.count = localIndex;
        if (xQueueSend(batchQueue, &batch, 0) != pdTRUE) {
          Serial.println("Batch queue full (partial)! Data loss may occur.");
        }
        localIndex = 0;
      }
    }
  }
}

// ----- Task 3: ECG Data Transmission -----
// Waits for a complete (or partial) batch from the batchQueue and transmits it over BLE.
void taskTransmission(void *pvParameters) {
  Batch batch;
  while (1) {
    if (xQueueReceive(batchQueue, &batch, portMAX_DELAY) == pdTRUE) {
      // Call the send function (identical to your original logic)
      sendDataBuffer(batch.samples, batch.count);
    }
  }
}

// ----- BLE Connection Parameter Optimization -----
// (Same as your original function)
void setPreferredConnectionParams() {
  uint16_t min_conn_interval = 6;  // 7.5ms (6 * 1.25ms)
  uint16_t max_conn_interval = 24; // 30ms (24 * 1.25ms)
  Bluefruit.Periph.setConnInterval(min_conn_interval, max_conn_interval);
  Serial.println("Connection parameters set.");
}

// ----- BLE Event Handlers (Unchanged) -----
void connect_callback(uint16_t conn_handle) {
  Serial.print("Device Connected with handle: ");
  Serial.println(conn_handle);
  deviceConnected = true;
  setPreferredConnectionParams();
  totalSamplesCollected = 0; // Reset sample counter on new connection
}

void disconnect_callback(uint16_t conn_handle, uint8_t reason) {
  Serial.print("Device Disconnected with handle: ");
  Serial.println(conn_handle);
  Serial.print("Reason: 0x");
  Serial.println(reason, HEX);
  deviceConnected = false;
}

// ----- Setup Function (Connection and BLE logic unchanged) -----
void setup() {
  Serial.begin(115200);
  delay(100);

  pinMode(ECG_PIN, INPUT);

  Serial.println("Initializing Bluefruit...");
  Bluefruit.begin();
  Bluefruit.setName("XIAO_ECG_Monitor");
  Serial.println("Bluefruit initialized.");

  Bluefruit.Periph.setConnectCallback(connect_callback);
  Bluefruit.Periph.setDisconnectCallback(disconnect_callback);
  Serial.println("Callbacks set.");

  bleUart.begin();
  Serial.println("UART service started.");
  Bluefruit.Advertising.addService(bleUart);
  Bluefruit.Advertising.addName();
  Bluefruit.Advertising.restartOnDisconnect(true);
  Serial.println("Advertising settings configured.");

  Bluefruit.Advertising.start();
  Serial.println("BLE UART Ready. Waiting for connection...");

  // ----- Create Queues -----
  sampleQueue = xQueueCreate(256, sizeof(uint16_t));  // Queue length can be tuned
  batchQueue = xQueueCreate(10, sizeof(Batch));         // Up to 10 batches pending

  // ----- Create FreeRTOS Tasks (Threads) -----
  // Note: xTaskCreate (not xTaskCreatePinnedToCore) is used for nRF52840
  xTaskCreate(taskAcquisition,  "AcquisitionTask", 2048, NULL, 2, NULL);
  xTaskCreate(taskProcessing,   "ProcessingTask",  2048, NULL, 1, NULL);
  xTaskCreate(taskTransmission, "TransmissionTask",2048, NULL, 1, NULL);
}

// ----- Main Loop -----
// The loop() is now empty because the FreeRTOS tasks handle everything.
void loop() {
  vTaskDelay(pdMS_TO_TICKS(1000));  // Yield to tasks
}

#include <bluefruit.h>

#define ECG_PIN 1                // ADC pin for the ECG sensor (AD8232)
#define BUFFER_SIZE 200          // 200 samples per batch (1 second at 200Hz)
#define SAMPLE_INTERVAL_MS 5     // Sample every 5 ms for 200Hz
#define TOTAL_SAMPLES 2000       // Ensure exactly 2000 samples are collected

bool deviceConnected = false;
uint16_t ecgBuffer[BUFFER_SIZE]; // Buffer to hold one batch of ECG samples.
uint32_t batchCount = 0;         // Batch counter.
int bufferIndex = 0;             // Current index in the buffer.
unsigned long lastSampleTime = 0; // Last time a sample was taken.
unsigned long startTime = 0;      // Time when sampling started.
int totalSamplesCollected = 0;    // Track the total number of samples

BLEUart bleUart;

// ----- ECG Sampling Function -----
void sampleECG() {
  if (totalSamplesCollected >= TOTAL_SAMPLES) return; // Stop after 2000 samples

  ecgBuffer[bufferIndex] = analogRead(ECG_PIN);  // Read ECG data
  bufferIndex++;
  totalSamplesCollected++;

  if (bufferIndex >= BUFFER_SIZE) {
    sendDataBuffer();
  }

  // If it's the last batch and has remaining samples, send it
  if (totalSamplesCollected >= TOTAL_SAMPLES && bufferIndex > 0) {
    sendDataBuffer();
  }
}

// ----- Function to Send Data Over BLE -----
void sendDataBuffer() {
  String dataString = "";

  for (int i = 0; i < bufferIndex; i++) {
    char hexStr[5];
    sprintf(hexStr, "%04X", ecgBuffer[i]); // Convert to 4-character hex
    dataString += hexStr;
    if (i < bufferIndex - 1) dataString += ",";
  }

  Serial.print("Data to send size: ");
  Serial.println(dataString.length());

  // Send BLE data
  bleUart.print(dataString);
  bleUart.println();

  batchCount++;
  Serial.print("Batch sent: ");
  Serial.println(batchCount);

  bufferIndex = 0;  // Reset buffer for next batch
}

// ----- BLE Connection Parameter Optimization -----
void setPreferredConnectionParams() {
  uint16_t min_conn_interval = 6;  // 7.5ms (6 * 1.25ms)
  uint16_t max_conn_interval = 24; // 30ms (24 * 1.25ms)
  Bluefruit.Periph.setConnInterval(min_conn_interval, max_conn_interval);
  Serial.println("Connection parameters set.");
}

// ----- BLE Event Handlers -----
void connect_callback(uint16_t conn_handle) {
  Serial.print("Device Connected with handle: ");
  Serial.println(conn_handle);
  deviceConnected = true;
  setPreferredConnectionParams();
  startTime = millis(); // Start timing when connected
  totalSamplesCollected = 0; // Reset sample counter
}

void disconnect_callback(uint16_t conn_handle, uint8_t reason) {
  Serial.print("Device Disconnected with handle: ");
  Serial.println(conn_handle);
  Serial.print("Reason: 0x");
  Serial.println(reason, HEX);
  deviceConnected = false;
}

// ----- Setup Function -----
void setup() {
  Serial.begin(115200);
  delay(100);

  pinMode(ECG_PIN, INPUT);

  Serial.println("Initializing Bluefruit...");
  Bluefruit.begin();
  Bluefruit.setName("XIAO_ECG_Monitor");
  Serial.println("Bluefruit initialized.");

  Bluefruit.Periph.setConnectCallback(connect_callback);
  Bluefruit.Periph.setDisconnectCallback(disconnect_callback);
  Serial.println("Callbacks set.");

  bleUart.begin();
  Serial.println("UART service started.");
  Bluefruit.Advertising.addService(bleUart);
  Bluefruit.Advertising.addName();
  Bluefruit.Advertising.restartOnDisconnect(true);
  Serial.println("Advertising settings configured.");

  Bluefruit.Advertising.start();
  Serial.println("BLE UART Ready. Waiting for connection...");
}

// ----- Main Loop -----
void loop() {
  if (deviceConnected && totalSamplesCollected < TOTAL_SAMPLES) {
    unsigned long currentMillis = millis();

    if (currentMillis - lastSampleTime >= SAMPLE_INTERVAL_MS) {
      lastSampleTime = currentMillis;
      sampleECG();
    }
  }
}


// 2000 batches aimed. 10 batches recieved

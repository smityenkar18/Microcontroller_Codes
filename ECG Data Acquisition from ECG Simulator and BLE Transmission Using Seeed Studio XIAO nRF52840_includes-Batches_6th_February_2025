#include <bluefruit.h>

#define ECG_PIN 1                // ADC pin for the ECG sensor (AD8232)
#define BUFFER_SIZE 200          // 200 samples per batch (1 second at 200Hz)
#define SAMPLE_INTERVAL_MS 5     // Sample every 5 ms for 200Hz

bool transmitting = false;
bool deviceConnected = false;
uint16_t ecgBuffer[BUFFER_SIZE]; // Buffer to hold one batch of ECG samples.
uint32_t batchCount = 0;         // Batch counter.
int bufferIndex = 0;             // Current index in the buffer.
unsigned long lastSampleTime = 0; // Last time a sample was taken.

BLEUart bleUart;

// ----- ECG Sampling Function -----
// Reads an ADC value and stores it in the buffer.
void sampleECG() {
  ecgBuffer[bufferIndex] = analogRead(ECG_PIN);  // Direct ADC reading
  bufferIndex++;

  // When the buffer is full (200 samples), transmit the batch.
  if (bufferIndex >= BUFFER_SIZE) {
    for (int i = 0; i < BUFFER_SIZE; i++) {
      bleUart.println(String(ecgBuffer[i]));  // Send each value over BLE
    }
    
    batchCount++;
    Serial.print("batch sent: ");
    Serial.println(batchCount);

    bufferIndex = 0;  // Reset buffer for next batch
  }
}

// ----- BLE Connection Parameter Optimization -----
void setPreferredConnectionParams() {
  uint16_t min_conn_interval = 6;  // 7.5ms (6 * 1.25ms)
  uint16_t max_conn_interval = 24; // 30ms (24 * 1.25ms)
  Bluefruit.Periph.setConnInterval(min_conn_interval, max_conn_interval);
}

// ----- BLE Event Handlers -----
void connect_callback(uint16_t conn_handle) {
  Serial.println("Device Connected!");
  deviceConnected = true;
  setPreferredConnectionParams();
}

void disconnect_callback(uint16_t conn_handle, uint8_t reason) {
  Serial.println("Device Disconnected!");
  deviceConnected = false;
  transmitting = false;
}

// ----- Setup Function -----
void setup() {
  Serial.begin(115200);
  pinMode(ECG_PIN, INPUT);

  Bluefruit.begin();
  Bluefruit.setName("XIAO_ECG_Monitor");

  // Set BLE connection callbacks.
  Bluefruit.Periph.setConnectCallback(connect_callback);
  Bluefruit.Periph.setDisconnectCallback(disconnect_callback);

  bleUart.begin();
  Bluefruit.Advertising.addService(bleUart);
  Bluefruit.Advertising.addName();
  Bluefruit.Advertising.restartOnDisconnect(true);
  Bluefruit.Advertising.start();

  Serial.println("BLE UART Ready. Waiting for connection...");
}

// ----- Main Loop -----
void loop() {
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    if (command.equalsIgnoreCase("START")) {
      transmitting = true;
      Serial.println("ECG Transmission Started");
    } else if (command.equalsIgnoreCase("STOP")) {
      transmitting = false;
      Serial.println("ECG Transmission Stopped");
    }
  }

  if (deviceConnected && transmitting) {
    unsigned long currentMillis = millis();
    if (currentMillis - lastSampleTime >= SAMPLE_INTERVAL_MS) {
      lastSampleTime = currentMillis;
      sampleECG();
    }
  }
}

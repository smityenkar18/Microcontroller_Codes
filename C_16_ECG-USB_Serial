#define ECG_PIN 1                // ADC pin for the ECG sensor (AD8232)
#define BUFFER_SIZE 200          // 200 samples per batch (1 second at 200Hz)
#define SAMPLE_INTERVAL_MS 5     // Sample every 5 ms for 200Hz
#include <Adafruit_TinyUSB.h>

bool transmitting = false;
uint16_t ecgBuffer[BUFFER_SIZE]; // Buffer to hold one batch of ECG samples.
uint32_t batchCount = 0;         // Batch counter.
int bufferIndex = 0;             // Current index in the buffer.
unsigned long lastSampleTime = 0; // Last time a sample was taken.

// ----- ECG Sampling Function -----
void sampleECG() {
  ecgBuffer[bufferIndex] = analogRead(ECG_PIN);  // Direct ADC reading
  bufferIndex++;

  // When the buffer is full (200 samples), transmit the batch.
  if (bufferIndex >= BUFFER_SIZE) {
    for (int i = 0; i < BUFFER_SIZE; i++) {
      Serial.println(ecgBuffer[i]);  // Send each value over USB Serial
    }

    batchCount++;
    Serial.print("Batch sent: ");
    Serial.println(batchCount);

    bufferIndex = 0;  // Reset buffer for next batch
  }
}

// ----- Setup Function -----
void setup() {
  Serial.begin(115200);
  pinMode(ECG_PIN, INPUT);
  Serial.println("USB Serial ECG Monitor Ready. Send 'START' to begin.");
}

// ----- Main Loop -----
void loop() {
  // Check for start/stop command from Serial Monitor
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    if (command.equalsIgnoreCase("START")) {
      transmitting = true;
      Serial.println("ECG Transmission Started");
    } else if (command.equalsIgnoreCase("STOP")) {
      transmitting = false;
      Serial.println("ECG Transmission Stopped");
    }
  }

  if (transmitting) {
    unsigned long currentMillis = millis();
    if (currentMillis - lastSampleTime >= SAMPLE_INTERVAL_MS) {
      lastSampleTime = currentMillis;
      sampleECG();
    }
  }
}
